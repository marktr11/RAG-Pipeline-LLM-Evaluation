from typing import Literal, List
from typing_extensions import Annotated, TypedDict
from langchain_core.documents import Document

class Search(TypedDict):
    """
    Structured representation of a search query, including the query string
    and the target document section.
    """
    query: Annotated[str, "The natural language search query to execute."]
    section: Annotated[
        Literal["beginning", "middle", "end"],
        "The specific section of the document to target for the search.",
    ]

class State(TypedDict):
    """
    Represents the state of the RAG application as it progresses through the graph.
    It holds the original question, the structured query, retrieved context, and the final answer.
    """
    question: str           # Original user question
    query: Search           # Structured query derived from the question
    context: List[Document] # Retrieved documents relevant to the query
    answer: str             # Final answer generated by the LLM